---
// No server-side logic needed for this component
---

<form class="w-full lg:w-1/2 max-w-xl bg-white rounded-xl shadow-lg p-8 flex flex-col gap-6 items-center lg:items-start" id="mcp-form">
  <div class="w-full flex flex-col">
    <label for="mcp-name" class="text-base mb-2 text-cream">MCP Name</label>
    <input id="mcp-name" name="mcp-name" type="text" required class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="Enter MCP name" />
  </div>
  <div class="w-full flex flex-col">
    <label for="mcp-desc" class="text-base mb-2 text-cream">Description</label>
    <textarea id="mcp-desc" name="mcp-desc" rows="3" maxlength="500" class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="Describe this MCP"></textarea>
    <div class="text-xs text-gray-500 mt-1 text-right">
      <span id="desc-counter">0</span>/500 characters
    </div>
  </div>
  
  <!-- Connection Type Buttons -->
  <div class="w-full">
    <div class="text-lg font-semibold mb-4 text-navy flex items-center gap-2">
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.111 16.404a5.5 5.5 0 017.778 0M12 20h.01m-7.08-7.071c3.904-3.905 10.236-3.905 14.141 0M1.394 9.393c5.857-5.857 15.355-5.857 21.213 0"></path>
      </svg>
      Connection Methods
    </div>
    <div class="grid grid-cols-1 sm:grid-cols-3 gap-3">
      <button type="button" id="add-http-btn" class="group relative px-6 py-4 bg-gradient-to-br from-blue-50 to-blue-100 text-blue-800 rounded-xl border-2 border-blue-200 hover:from-blue-100 hover:to-blue-200 hover:border-blue-300 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg">
        <div class="flex flex-col items-center gap-2">
          <svg class="w-6 h-6 text-blue-600 group-hover:scale-110 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"></path>
          </svg>
          <span class="font-semibold">HTTP</span>
          <span class="text-xs text-blue-600 opacity-75">Web API</span>
        </div>
      </button>
      <button type="button" id="add-stdio-btn" class="group relative px-6 py-4 bg-gradient-to-br from-emerald-50 to-emerald-100 text-emerald-800 rounded-xl border-2 border-emerald-200 hover:from-emerald-100 hover:to-emerald-200 hover:border-emerald-300 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg">
        <div class="flex flex-col items-center gap-2">
          <svg class="w-6 h-6 text-emerald-600 group-hover:scale-110 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
          </svg>
          <span class="font-semibold">STDIO</span>
          <span class="text-xs text-emerald-600 opacity-75">Command Line</span>
        </div>
      </button>
      <button type="button" id="add-sse-btn" class="group relative px-6 py-4 bg-gradient-to-br from-violet-50 to-violet-100 text-violet-800 rounded-xl border-2 border-violet-200 hover:from-violet-100 hover:to-violet-200 hover:border-violet-300 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg">
        <div class="flex flex-col items-center gap-2">
          <svg class="w-6 h-6 text-violet-600 group-hover:scale-110 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
          </svg>
          <span class="font-semibold">SSE</span>
          <span class="text-xs text-violet-600 opacity-75">Server Events</span>
        </div>
      </button>
    </div>
  </div>

  <!-- Dynamic Config Sections Container -->
  <div id="config-sections" class="w-full flex flex-col gap-4">
    <!-- Config sections will be dynamically added here -->
  </div>

   <!-- Collapsible Links Section -->
  <div class="w-full">
    <button type="button" id="links-toggle" class="w-full flex items-center py-2 text-left group cursor-pointer">
      <span class="text-md text-gray-600 group-hover:text-gray-800 pr-2 transition-colors">Add website links</span>
      <svg id="links-chevron" class="w-3 h-3 text-gray-800 group-hover:text-gray-600 transition-all duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
      </svg>
    </button>
    <div id="links-section" class="hidden mt-4 space-y-4 pb-2">
      <div class="w-full flex flex-col">
        <label for="mcp-homepage" class="text-base mb-2 text-cream">Link to provider website (optional)</label>
        <input id="mcp-homepage" name="mcp-homepage" type="url" class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="https://example.com" />
      </div>
      <div class="w-full flex flex-col">
        <label for="mcp-repository" class="text-base mb-2 text-cream">Link to source code (optional)</label>
        <input id="mcp-repository" name="mcp-repository" type="url" class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="https://github.com/example/repo" />
      </div>
      <div class="w-full flex flex-col">
        <label for="mcp-documentation" class="text-base mb-2 text-cream">Link to documentation (optional)</label>
        <input id="mcp-documentation" name="mcp-documentation" type="url" class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="https://docs.example.com" />
      </div>
    </div>
  </div>
  

  <button type="submit" id="mcp-submit" class="w-full py-3 rounded-lg font-semibold border transition" style="background-color: #1a2946; color: #fdf6e3; border-color: #1a2946;">Create MCP install link</button>
</form>

<script>
  import type { LinkData, McpConfig } from '../utils/types.ts';

  const form = document.getElementById('mcp-form');
  const descTextarea = document.getElementById('mcp-desc');
  const descCounter = document.getElementById('desc-counter');
  const linksToggle = document.getElementById('links-toggle');
  const linksSection = document.getElementById('links-section');
  const linksChevron = document.getElementById('links-chevron');
  const configSections = document.getElementById('config-sections');
  
  const addHttpBtn = document.getElementById('add-http-btn');
  const addStdioBtn = document.getElementById('add-stdio-btn');
  const addSseBtn = document.getElementById('add-sse-btn');
  
  let configCounter = 0;
  let configs: Array<{id: string, type: string, isDefault: boolean}> = [];
  
  // Character counter for description
  function updateDescCounter() {
    if (descTextarea && descCounter) {
      const length = (descTextarea as HTMLTextAreaElement).value.length;
      descCounter.textContent = length.toString();
    }
  }
  
  if (descTextarea) {
    descTextarea.addEventListener('input', updateDescCounter);
    updateDescCounter();
  }
  
  // Handle collapsible links section
  if (linksToggle && linksSection && linksChevron) {
    linksToggle.addEventListener('click', function() {
      const isHidden = linksSection.classList.contains('hidden');
      
      if (isHidden) {
        linksSection.classList.remove('hidden');
        linksChevron.style.transform = 'rotate(180deg)';
      } else {
        linksSection.classList.add('hidden');
        linksChevron.style.transform = 'rotate(0deg)';
      }
    });
  }
  
  // Create config section HTML
  function createConfigSection(type: string, id: string, isDefault: boolean = false) {
    const colorClasses: Record<string, string> = {
      http: 'border-blue-300 bg-gradient-to-br from-blue-50 to-blue-100 shadow-blue-100',
      stdio: 'border-emerald-300 bg-gradient-to-br from-emerald-50 to-emerald-100 shadow-emerald-100', 
      sse: 'border-violet-300 bg-gradient-to-br from-violet-50 to-violet-100 shadow-violet-100'
    };
    
    const typeLabels: Record<string, string> = {
      http: 'HTTP',
      stdio: 'STDIO',
      sse: 'SSE'
    };
    
    const typeIcons: Record<string, string> = {
      http: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"></path>
             </svg>`,
      stdio: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>`,
      sse: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>`
    };
    
    let fieldsHTML = '';
    
    if (type === 'stdio') {
      fieldsHTML = `
        <div class="w-full flex flex-col">
          <label for="${id}-command" class="text-base mb-2 text-cream">Command <span class="text-red-400">*</span></label>
          <input id="${id}-command" name="${id}-command" type="text" required class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="Enter command" />
        </div>
        <div class="w-full flex flex-col">
          <label for="${id}-env" class="text-base mb-2 text-cream">Env Vars (optional, comma separated)</label>
          <input id="${id}-env" name="${id}-env" type="text" class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="ENV1, ENV2=VAL, ENV3, ..." />
        </div>
      `;
    } else {
      fieldsHTML = `
        <div class="w-full flex flex-col">
          <label for="${id}-url" class="text-base mb-2 text-cream">URL <span class="text-red-400">*</span></label>
          <input id="${id}-url" name="${id}-url" type="text" required class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="https://..." />
        </div>
        <div class="w-full flex flex-col">
          <label for="${id}-headers" class="text-base mb-2 text-cream">Headers (optional, comma separated)</label>
          <input id="${id}-headers" name="${id}-headers" type="text" class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="Authorization=Bearer API_KEY, ..." />
        </div>
      `;
    }
    
    return `
      <div id="config-${id}" class="w-full p-6 rounded-xl border-2 ${colorClasses[type]} relative shadow-lg hover:shadow-xl transition-all duration-300">
        <div class="flex items-center justify-between mb-6">
          <div class="flex items-center gap-3">
            <div class="p-2 rounded-lg bg-white/50 backdrop-blur-sm border border-white/20">
              ${typeIcons[type]}
            </div>
            <div>
              <h3 class="text-lg font-bold text-gray-800">${typeLabels[type]} Connection</h3>
              <p class="text-sm text-gray-600">${type === 'http' ? 'Web API endpoint' : type === 'stdio' ? 'Command line interface' : 'Server-sent events'}</p>
            </div>
            ${isDefault ? '<span class="px-3 py-1 bg-gradient-to-r from-yellow-400 to-amber-400 text-yellow-900 text-xs font-semibold rounded-full shadow-sm">Primary</span>' : ''}
          </div>
          <button type="button" class="remove-config p-2 rounded-lg text-red-500 hover:text-red-700 hover:bg-red-50 transition-all duration-200" data-config-id="${id}">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div class="space-y-4">
          ${fieldsHTML}
          ${!isDefault ? `<button type="button" class="set-default px-4 py-2 text-sm text-gray-600 hover:text-gray-800 bg-white/50 backdrop-blur-sm border border-white/20 rounded-lg hover:bg-white/70 transition-all duration-200" data-config-id="${id}">Set as primary connection</button>` : ''}
        </div>
      </div>
    `;
  }
  
  // Add config section
  function addConfigSection(type: string) {
    configCounter++;
    const id = `${type}-${configCounter}`;
    const isDefault = configs.length === 0;
    
    configs.push({id, type, isDefault});
    
    if (configSections) {
      configSections.insertAdjacentHTML('beforeend', createConfigSection(type, id, isDefault));
      
      // Add event listeners for remove and set default buttons
      const configElement = document.getElementById(`config-${id}`);
      if (configElement) {
        const removeBtn = configElement.querySelector('.remove-config');
        const setDefaultBtn = configElement.querySelector('.set-default');
        
        if (removeBtn) {
          removeBtn.addEventListener('click', () => removeConfig(id));
        }
        
        if (setDefaultBtn) {
          setDefaultBtn.addEventListener('click', () => setDefaultConfig(id));
        }
      }
    }
    
    updateButtonStates();
  }
  
  // Remove config section
  function removeConfig(id: string) {
    const configElement = document.getElementById(`config-${id}`);
    if (configElement) {
      configElement.remove();
    }
    
    const configIndex = configs.findIndex(c => c.id === id);
    if (configIndex > -1) {
      const wasDefault = configs[configIndex].isDefault;
      configs.splice(configIndex, 1);
      
      // If we removed the default and have other configs, make the first one default
      if (wasDefault && configs.length > 0) {
        configs[0].isDefault = true;
        refreshConfigSections();
      }
    }
    
    updateButtonStates();
  }
  
  // Set config as default
  function setDefaultConfig(id: string) {
    configs.forEach(config => {
      config.isDefault = config.id === id;
    });
    refreshConfigSections();
  }
  
  // Refresh all config sections
  function refreshConfigSections() {
    if (configSections) {
      configSections.innerHTML = '';
      configs.forEach(config => {
        configSections.insertAdjacentHTML('beforeend', createConfigSection(config.type, config.id, config.isDefault));
        
        const configElement = document.getElementById(`config-${config.id}`);
        if (configElement) {
          const removeBtn = configElement.querySelector('.remove-config');
          const setDefaultBtn = configElement.querySelector('.set-default');
          
          if (removeBtn) {
            removeBtn.addEventListener('click', () => removeConfig(config.id));
          }
          
          if (setDefaultBtn) {
            setDefaultBtn.addEventListener('click', () => setDefaultConfig(config.id));
          }
        }
      });
    }
  }
  
  // Update button states
  function updateButtonStates() {
    const hasHttp = configs.some(c => c.type === 'http');
    const hasStdio = configs.some(c => c.type === 'stdio');
    const hasSse = configs.some(c => c.type === 'sse');
    
    // Show buttons for types that haven't been added yet
    if (addHttpBtn) addHttpBtn.style.display = hasHttp ? 'none' : 'block';
    if (addStdioBtn) addStdioBtn.style.display = hasStdio ? 'none' : 'block';
    if (addSseBtn) addSseBtn.style.display = hasSse ? 'none' : 'block';
  }
  
  // Button event listeners
  if (addHttpBtn) {
    addHttpBtn.addEventListener('click', () => addConfigSection('http'));
  }
  
  if (addStdioBtn) {
    addStdioBtn.addEventListener('click', () => addConfigSection('stdio'));
  }
  
  if (addSseBtn) {
    addSseBtn.addEventListener('click', () => addConfigSection('sse'));
  }
  
  // Form submission
  if (form) {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      if (configs.length === 0) {
        alert('Please add at least one connection method.');
        return;
      }

      const fd = new FormData(form as HTMLFormElement);
      const name = ((fd.get('mcp-name') as string) || '').replace(/\s\s+/g, ' ').trim();
      const desc = fd.get('mcp-desc') as string;
      const homepage = fd.get('mcp-homepage') as string;
      const repository = fd.get('mcp-repository') as string;
      const documentation = fd.get('mcp-documentation') as string;
      
      const mcpConfigs: McpConfig[] = configs.map(config => {
        if (config.type === 'stdio') {
          return {
            type: 'stdio',
            command: fd.get(`${config.id}-command`) as string,
            env: fd.get(`${config.id}-env`) as string,
            default: config.isDefault,
          };
        } else {
          return {
            type: config.type as 'http' | 'sse',
            url: fd.get(`${config.id}-url`) as string,
            authName: '',
            authValue: '',
            headers: fd.get(`${config.id}-headers`) as string,
            default: config.isDefault,
          };
        }
      });

      const data: LinkData = {
        name,
        desc,
        homepage,
        repository,
        documentation,
        configs: mcpConfigs,
      };

      const encoded = btoa(unescape(encodeURIComponent(JSON.stringify(data))));
      const installUrl = window.location.origin + '/' + encoded;
      window.location.href = installUrl;
    });
  }
</script>
