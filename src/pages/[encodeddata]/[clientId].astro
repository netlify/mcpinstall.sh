---
export const prerender = false;

import Layout from "../../layouts/Layout.astro";
import McpServerDetails from "../../components/McpServerDetails.astro";
import PageHeader from "../../components/PageHeader.astro";
import { generateGenericConfig, getCompatibleConfigTypes, getCompatibleConfigs, ensureCompatibleWorkingConfig } from "../../utils/configs";
import { getClientById } from "../../utils/clientData";
import type { ClientData } from "../../clients/types";
import { marked } from "marked";
import type { LinkData, McpConfig } from "../../utils/types";

const { encodeddata, clientId } = Astro.params;
const url = new URL(Astro.request.url);
const selectedConfigType = url.searchParams.get('config');

let decodedData: LinkData;
try {
  // Handle potential double encoding from URL
  let decodedString = decodeURIComponent(encodeddata || '');
  // If it's still URL-encoded, decode again
  if (decodedString.includes('%')) {
    decodedString = decodeURIComponent(decodedString);
  }
  decodedData = JSON.parse(atob(decodedString));
} catch (error) {
  // If decoding fails, try direct base64 decode
  try {
    decodedData = JSON.parse(atob(encodeddata || ''));
  } catch (fallbackError) {
    console.error('Failed to decode data:', error, fallbackError);
    return Astro.redirect('/');
  }
}

const mcpServerName = decodedData?.name ? `"${decodedData.name}" MCP Server` : "MCP Server";
const client: ClientData | undefined = getClientById(clientId as string);

if (!client) {
  return Astro.redirect(`/${encodeddata}`);
}

// Create modified data with selected config if URL param exists
let configData = decodedData;
if (selectedConfigType) {
  const modifiedConfigs = decodedData.configs.map(config => ({
    ...config,
    default: config.type === selectedConfigType
  }));
  configData = { ...decodedData, configs: modifiedConfigs };
}

// Get compatible configurations using utility functions
const compatibleConfigs = getCompatibleConfigs(client, decodedData);

// Create filtered data for display
const filteredData = { ...decodedData, configs: compatibleConfigs };

// Ensure we have a compatible working configuration
const workingConfigData = ensureCompatibleWorkingConfig(client, configData, selectedConfigType);

// Use the working data for client functions
const clientSpecificConfig = client.generateConfig(workingConfigData);
const instructionsMarkdown = client.instructions(client.generateConfig, workingConfigData);
const instructionsHtml = marked(instructionsMarkdown);

// Generate install link if the client supports it
const installLinkData = client.generateInstallLink ? client.generateInstallLink(workingConfigData) : null;
---

<Layout />
<main class="min-h-screen flex flex-col lg:flex-row bg-[#fdf6e3]">
  <!-- Left side: Clean minimal MCP server info -->
  <div class="w-full lg:w-2/5 bg-[#fdf6e3] border-b lg:border-b-0 lg:border-r border-[#e0ddd4] flex flex-col px-6 lg:px-12 py-8 lg:py-14">
    <PageHeader rightLinks={[
      { url: `/${encodeddata}`, text: "← Choose a different MCP client" }
    ]} />

    <div class="max-w-md flex-1 flex flex-col lg:mt-[5%] xl:mt-[10%] 2xl:mt-24">
      <!-- MCP Server Header -->
      <div class="mb-8">
        <h1 class="text-3xl lg:text-4xl font-bold text-[#1a2946] mb-4">
          {decodedData?.name || 'MCP Server'}
        </h1>
        <p class="text-base lg:text-lg text-gray-600 leading-relaxed">
          {decodedData?.desc?.substring(0, 500) || 'No server description provided'}
        </p>
      </div>

      <!-- Configuration Type Selection -->
            <!-- Configuration Type Selection -->
      {filteredData.configs && filteredData.configs.length > 1 && (
        <div class="mb-8 pb-6 border-b border-[#e0ddd4]">
          <h3 class="text-lg font-semibold text-[#1a2946] mb-4 flex items-center gap-2">
            
            Available Servers
          </h3>
          <div class="grid grid-cols-2 sm:grid-cols-3 gap-3">
            {filteredData.configs.map((config, index) => {
              const isDefault = selectedConfigType ? config.type === selectedConfigType : (config.default || (index === 0 && !filteredData.configs.some(c => c.default)));
              const colorClasses = {
                http: 'border-blue-200 bg-gradient-to-br from-blue-50 to-blue-100 text-blue-800 hover:from-blue-100 hover:to-blue-200 hover:border-blue-300',
                stdio: 'border-emerald-200 bg-gradient-to-br from-emerald-50 to-emerald-100 text-emerald-800 hover:from-emerald-100 hover:to-emerald-200 hover:border-emerald-300',
                sse: 'border-violet-200 bg-gradient-to-br from-violet-50 to-violet-100 text-violet-800 hover:from-violet-100 hover:to-violet-200 hover:border-violet-300'
              };
              
              const typeLabels = {
                http: 'HTTP',
                stdio: 'STDIO', 
                sse: 'SSE'
              };
              
              const typeDescriptions = {
                http: 'Remote Server',
                stdio: 'Local Server',
                sse: 'Server Events'
              };
              
              const typeIcons = {
                http: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z"></path>
                      </svg>`,
                stdio: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                       </svg>`,
                sse: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                       <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                     </svg>`
              };
              
              return (
                <button
                  type="button"
                  class={`config-selector group cursor-pointer relative px-4 py-3 rounded-xl border-2 transition-all duration-300 text-center hover:shadow-lg transform hover:-translate-y-1 min-h-[96px] overflow-hidden ${colorClasses[config.type as keyof typeof colorClasses]} ${isDefault ? 'ring-2 ring-offset-2 ring-[#1a2946]' : ''}`}
                  data-config-index={index}
                  data-config-type={config.type}
                >
                  {isDefault && (
                    <span class="absolute top-0 left-0 px-1 py-1 bg-gradient-to-r from-yellow-400 to-amber-400 text-yellow-900 text-xs font-semibold shadow-sm rounded-br-lg">Selected</span>
                  )}
                  <div class="flex flex-col items-center gap-2">
                    <div class="group-hover:scale-110 transition-transform" set:html={typeIcons[config.type as keyof typeof typeIcons]} />
                    <div>
                      <div class="flex items-center justify-center gap-2">
                        <span class="font-semibold">{typeLabels[config.type as keyof typeof typeLabels]}</span>
                      </div>
                      <p class="text-xs opacity-75 mt-1">{typeDescriptions[config.type as keyof typeof typeDescriptions]}</p>
                    </div>
                  </div>
                </button>
              );
            })}
          </div>
        </div>
      )}

      <!-- Warning when no compatible configs exist -->
      {(!filteredData.configs || filteredData.configs.length === 0) && (
        <div class="mb-8 pb-6 border-b border-[#e0ddd4]">
          <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div class="flex items-start">
              <svg class="w-5 h-5 text-yellow-600 mt-0.5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 14.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
              <div>
                <h4 class="text-sm font-medium text-yellow-800">No Compatible Server Types</h4>
                <p class="text-sm text-yellow-700 mt-1">
                  {client.name} doesn't support any of the available server connection types for this MCP server. 
                  Please try a different client or check if the server provides additional connection options.
                </p>
              </div>
            </div>
          </div>
        </div>
      )}

      <!-- MCP Server Links -->
      <div class="space-y-6">
        <div>
          <h3 class="text-sm font-semibold text-[#1a2946] uppercase tracking-wide mb-2">Provider Website</h3>
          {decodedData?.homepage ? (
            <a 
              href={decodedData.homepage} 
              target="_blank" 
              rel="noopener noreferrer"
              class="text-[#006f92] hover:text-[#1a2946] transition-colors break-all"
            >
              {new URL(decodedData.homepage).toString()}
            </a>
          ) : (
            <span class="text-gray-500 italic">Not provided</span>
          )}
        </div>

        <div>
          <h3 class="text-sm font-semibold text-[#1a2946] uppercase tracking-wide mb-2">Source Code</h3>
          {decodedData?.repository ? (
            <a 
              href={decodedData.repository} 
              target="_blank" 
              rel="noopener noreferrer"
              class="text-[#006f92] hover:text-[#1a2946] transition-colors break-all"
            >
              {new URL(decodedData.repository).toString()}
            </a>
          ) : (
            <span class="text-gray-500 italic">Not provided</span>
          )}
        </div>

        <div>
          <h3 class="text-sm font-semibold text-[#1a2946] uppercase tracking-wide mb-2">Documentation</h3>
          {decodedData?.documentation ? (
            <a 
              href={decodedData.documentation} 
              target="_blank" 
              rel="noopener noreferrer"
              class="text-[#006f92] hover:text-[#1a2946] transition-colors break-all"
            >
              {new URL(decodedData.documentation).toString()}
            </a>
          ) : (
            <span class="text-gray-500 italic">Not provided</span>
          )}
        </div>
      </div>
    </div>
  </div>

  <!-- Right side: Installation form/instructions -->
  <div class="flex-1 bg-white shadow-xl">
    <div class="px-6 lg:px-12 py-8 lg:py-16 max-w-3xl">

      <!-- Installation Header -->
      <div class="mb-8">
        <div class="flex flex-col sm:flex-row items-start sm:items-center gap-3 mb-4">
          <img src={client.imageUrl} alt={`${client.name} icon`} class="w-6 h-6 object-contain" />
          <h2 class="text-2xl lg:text-3xl text-gray-700 font-bold">{client.name} with MCP Installation</h2>
        </div>
      </div>

      <!-- One-Click Install Link (if available) -->
      {installLinkData && (
        <div class="mb-12 border-b border-[#e0ddd4]" data-install-link-container>
          <div class="bg-gradient-to-r from-[#006f92] to-[#1a2946] rounded-lg p-6 mb-12 text-white">
            <div class="flex items-center gap-3 mb-4">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
              <h3 class="text-xl font-bold">One-Click Install</h3>
            </div>
            <p class="mb-4 text-blue-100">
              This link will automatically install the {mcpServerName} in {client.name}:
            </p>
            <a 
              href={installLinkData.installLink}
              class="inline-flex items-center gap-2 bg-white text-[#006f92] font-semibold px-6 py-3 rounded-lg hover:bg-gray-100 transition-colors duration-200"
            >
              <img src={client.imageUrl} alt={`${client.name} icon`} class="w-5 h-5 object-contain" />
              Install in {client.name}
            </a>
            <p class="mt-12 text-sm text-blue-100">
              <b>What to expect?</b> If you have {client.name} installed, this link will open {client.name} and prompt you to install the MCP server automatically. The same configuration seen in the manual section below will be applied. You can adjust these settings after install.
            </p>
          </div>
        </div>
        
      )}

      <!-- Installation Steps -->
      <div class="bg-[#fffefc] rounded-lg mb-8">
        
        <div class="pb-12">
          <h2 class="text-3xl font-semibold text-[#1a2946] pb-2">
            Installation Instructions
          </h2>

          <p class="text-gray-600">
            Follow these steps to install this MCP server in {client.name}
          </p>
        </div>
       

        <div class="prose max-w-none 
                    prose-headings:text-[#1a2946] prose-headings:font-bold
                    prose-h1:text-2xl prose-h1:mb-6 prose-h1:mt-0
                    prose-h2:text-xl prose-h2:mb-4 prose-h2:mt-0
                    prose-p:text-gray-700 prose-p:leading-relaxed
                    prose-strong:text-[#1a2946] prose-strong:font-semibold
                    prose-ol:space-y-3 prose-li:text-gray-700
                    prose-inline-code:bg-[#eee8d5] prose-inline-code:text-[#1a2946] prose-inline-code:px-2 prose-inline-code:py-1 prose-inline-code:rounded prose-inline-code:text-sm prose-inline-code:font-mono
                    prose-pre:bg-[#1a2946] prose-pre:text-[#fdf6e3] prose-pre:p-4 prose-pre:rounded-lg prose-pre:overflow-auto prose-pre:leading-tight
                    prose-code:bg-purple prose-pre:code:!p-0 prose-pre:code:!text-[#fdf6e3] prose-pre:code:!leading-tight
                    prose-blockquote:border-l-4 prose-blockquote:border-[#006f92] prose-blockquote:bg-[#eee8d5] prose-blockquote:p-4 prose-blockquote:rounded-r-lg prose-blockquote:my-4
                    prose-blockquote:text-[#1a2946] prose-blockquote:font-medium prose-blockquote:italic-0">
          <div set:html={instructionsHtml}></div>
        </div>
      </div>

      <!-- Client Resources -->
      {client.docs && (
        <div class="bg-[#f8f9fa] border border-[#e9ecef] rounded-lg p-6">
          <h3 class="font-semibold mb-3 flex items-center gap-2">
            <img src={client.imageUrl} alt={`${client.name} icon`} class="w-5 h-5 object-contain" />
            Need more help with {client.name}?
          </h3>
          <p class="text-gray-600 mb-4">
            Check the official documentation for detailed MCP setup instructions:
          </p>
          <a 
            href={client.docs} 
            target="_blank" 
            rel="noopener noreferrer"
            class="text-[#006f92] hover:text-[#1a2946] transition-colors duration-200"
          >
            View {client.name} MCP Documentation →
          </a>
        </div>
      )}

    </div>
  </div>
</main>

<script src="/scripts/mcp-copy-buttons.js"  is:inline></script>

<script>
  // Configuration selection functionality
  document.addEventListener('DOMContentLoaded', function() {
    const configSelectors = document.querySelectorAll('.config-selector');
    
    if (configSelectors.length <= 1) return; // No need for selection with only one config
    
    // Handle configuration selection
    configSelectors.forEach((selector) => {
      selector.addEventListener('click', function(this: HTMLElement) {
        const selectedIndex = parseInt(this.dataset.configIndex || '0');
        const selectedType = this.dataset.configType;
        
        // Update visual selection
        configSelectors.forEach(s => {
          s.classList.remove('ring-2', 'ring-offset-2', 'ring-[#1a2946]');
        });
        this.classList.add('ring-2', 'ring-offset-2', 'ring-[#1a2946]');
        
        // Update the page with the selected configuration
        updatePageForConfig(selectedIndex, selectedType);
      });
    });
    
    function updatePageForConfig(configIndex: number, configType: string | undefined) {
      try {
        // Get current URL parts
        const pathParts = window.location.pathname.split('/');
        const currentEncodedData = pathParts[1];
        const currentClientId = pathParts[2];
        
        if (!currentEncodedData || !configType) return;
        
        // Navigate to the same page with config parameter
        const newUrl = `/${currentEncodedData}/${currentClientId}?config=${configType}`;
        window.location.href = newUrl;
        
      } catch (error) {
        console.error('Error updating configuration:', error);
      }
    }
  });
</script>