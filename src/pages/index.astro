---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <div class="min-h-screen bg-cream text-navy flex flex-col font-sans">
  <main class="flex-1 flex flex-col justify-center items-center px-4">
	<section class="w-full max-w-2xl mx-auto py-16 flex flex-col items-center">
	  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@700;900&family=Playfair+Display:wght@700&display=swap" rel="stylesheet" />
	  <h1 class="text-6xl font-extrabold mb-6 tracking-tight text-center text-navy font-[Montserrat,Playfair_Display,serif]" style="font-family: 'Montserrat', 'Playfair Display', serif;">
		MCPInstall.sh
	  </h1>
	  <p class="text-xl max-w-2xl text-center mb-6 text-navy/80" style="font-family: 'Playfair Display';">
		<span class="font-semibold">The universal MCP installation link.</span>
	  </p>
	  <p class="text-lg max-w-2xl text-center mb-8 text-navy/70 font-[Montserrat,sans-serif]" style="font-family: 'Montserrat', sans-serif;">
		MCPInstall.sh lets you create installation links for your favorite editors and tools. Your install links are always up to date, making it easy to share and automate MCP setups across any environment.
	  </p>
	</section>
  <form class="w-full max-w-xl bg-navy rounded-xl shadow-lg p-8 flex flex-col gap-6 items-center" id="mcp-form">
	  <div class="w-full flex flex-col">
		<label for="mcp-name" class="text-base mb-2 text-cream">MCP Name</label>
		<input id="mcp-name" name="mcp-name" type="text" required class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="Enter MCP name" />
	  </div>
	  <div class="w-full flex flex-col">
		<label for="mcp-desc" class="text-base mb-2 text-cream">Description</label>
		<textarea id="mcp-desc" name="mcp-desc" rows="3" class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="Describe this MCP"></textarea>
	  </div>
	  <div class="w-full flex flex-col">
		<label for="mcp-type" class="text-base mb-2 text-cream">Type</label>
		<select id="mcp-type" name="mcp-type" class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition">
		  <option value="stdio">Stdio</option>
		  <option value="sse">SSE</option>
		  <option value="http">HTTP</option>
		</select>
	  </div>
	  <div id="stdio-fields" class="w-full flex flex-col hidden">
		<label for="stdio-command" class="text-base mb-2 text-cream">Command <span class="text-red-400">*</span></label>
		<input id="stdio-command" name="stdio-command" type="text" class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="Enter command" />
		<label for="stdio-args" class="text-base mt-4 mb-2 text-cream">Command Args (optional, space separated)</label>
		<input id="stdio-args" name="stdio-args" type="text" class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="arg1 arg2 ..." />
		<label for="stdio-env" class="text-base mt-4 mb-2 text-cream">Env Vars (optional, space separated)</label>
		<input id="stdio-env" name="stdio-env" type="text" class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="ENV1 ENV2 ..." />
	  </div>
	  <div id="http-fields" class="w-full flex flex-col hidden">
		<label for="http-url" class="text-base mb-2 text-cream">URL <span class="text-red-400">*</span></label>
		<input id="http-url" name="http-url" type="text" class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="https://..." />
		<label for="http-auth-name" class="text-base mt-4 mb-2 text-cream">Auth Header Name (optional)</label>
		<input id="http-auth-name" name="http-auth-name" type="text" class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="Authorization" />
		<label for="http-auth-value" class="text-base mt-4 mb-2 text-cream">Auth Header Value (optional)</label>
		<input id="http-auth-value" name="http-auth-value" type="text" class="w-full p-3 rounded-lg border border-navy bg-cream text-navy focus:outline-none focus:ring-2 focus:ring-navy transition" placeholder="Bearer ..." />
	  </div>
  <button type="submit" class="w-full py-3 rounded-lg bg-cream text-navy font-semibold border border-navy hover:bg-navy hover:text-cream transition">Create MCP install link</button>
  <div id="install-link" class="w-full mt-6 text-center break-all text-navy font-mono"></div>
	</form>
  <script>

	import type { LinkData } from '../utils/types.ts';

	const typeSelect = document.getElementById('mcp-type');
	const stdioFields = document.getElementById('stdio-fields');
	const httpFields = document.getElementById('http-fields');
	const form = document.getElementById('mcp-form');
	const installLink = document.getElementById('install-link');
	function updateFields() {
	  if (!typeSelect || !stdioFields || !httpFields) return;
	  const value = (typeSelect instanceof HTMLSelectElement) ? typeSelect.value : '';
	  if (value === 'stdio') {
		stdioFields.classList.remove('hidden');
		httpFields.classList.add('hidden');
	  } else {
		stdioFields.classList.add('hidden');
		httpFields.classList.remove('hidden');
	  }
	}
	if (typeSelect) {
	  typeSelect.addEventListener('change', updateFields);
	  updateFields();
	}

	if (form) {
	  form.addEventListener('submit', function(e) {
		e.preventDefault();

		const fd = form && new FormData(form as HTMLFormElement);
		const type = fd.get('mcp-type');
		const name = fd.get('mcp-name') as string;
		const desc = fd.get('mcp-desc') as string;
		let data: LinkData | undefined;

		if (type === 'stdio') {
		  data = {
			name,
			desc,
			type,
			command: fd.get('stdio-command') as string,
			args: fd.get('stdio-args') as string,
			env: fd.get('stdio-env') as string,
		  };
		} else if (type === 'http' || type === 'sse') {
		  data = {
			name,
			desc,
			type,
			url: fd.get('http-url') as string,
			authName: fd.get('http-auth-name') as string,
			authValue: fd.get('http-auth-value') as string,
		  };
		}

		// Base64 encode
		var encoded = btoa(unescape(encodeURIComponent(JSON.stringify(data))));
		var installUrl = window.location.origin + '/' + encoded;
		if (installLink) {
			installLink.textContent = installUrl;
		}
	  });
	}
  </script>
  </main>
  <footer class="w-full text-center py-6 text-xs text-navy/60">
	Cooked with ❤️ by Netlify and the open source community.
  </footer>
  </div>
</Layout>