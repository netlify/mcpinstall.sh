
---
export const prerender = false;

import Layout from "../layouts/Layout.astro";
import McpServerDetails from "../components/McpServerDetails.astro";
import { generateGenericConfig } from "../utils/configs";
import { getClientsForButtons } from "../utils/clientData";

const { encodeddata } = Astro.params;
const decodedData = encodeddata && JSON.parse(atob(decodeURIComponent(encodeddata)));

const mcpServerName = decodedData?.name ? `"${decodedData.name}" MCP Server` : "MCP Server";
const genericMCPServerConfig = generateGenericConfig(decodedData);

// Get client button data from the shared module
const buttons = getClientsForButtons();
---

<Layout />
<main class="min-h-screen flex bg-[#fdf6e3]">
  <!-- Left side: Clean minimal MCP server info -->
  <div class="w-2/5 bg-[#fdf6e3] border-r border-[#e0ddd4] flex flex-col px-12 py-16">
    

    <div class="max-w-md flex-1 flex flex-col mt-[40%]">
      <McpServerDetails decodedData={decodedData} />
    </div>
  </div>

  <!-- Right side: Generic config and client selection -->
  <div class="flex-1 bg-white shadow-xl">
    <div class="px-12 py-16 max-w-3xl">
      <!-- Header -->
      <div class="mb-8">
        <h2 class="text-3xl font-bold text-[#1a2946] mb-4">
          Choose Your MCP Client
        </h2>
        <p class="text-gray-600">
          Select your preferred client for specific installation instructions or use the general configuration below if you know how to add it manually.
        </p>
      </div>

      <!-- Client Selection Grid -->
      <div class="mb-12">
        <div class="grid grid-cols-2 gap-4">
          {buttons.map((button) => (
            <button
              class="relative bg-[#fffefc] border border-[#e0ddd4] hover:border-[#006f92] text-[#1a2946] hover:text-[#006f92] py-4 px-6 rounded-lg transition-all duration-200 flex items-center shadow-sm hover:shadow group overflow-hidden w-full cursor-pointer client-button"
              data-client-id={button.id}
            >
              {/* Image or placeholder */}
              <div class="w-8 h-8 flex items-center justify-center mr-4 flex-shrink-0">
                {button.imageUrl ? (
                  <img src={button.imageUrl} alt={`${button.label} icon`} class="w-6 h-6 object-contain" />
                ) : (
                  <div class="w-4 h-4 bg-[#1a2946] group-hover:bg-[#006f92] transition-colors duration-200 rounded-sm"></div>
                )}
              </div>
              <span class="font-semibold text-left">{button.label}</span>
              {/* Decorative accent element */}
              <div class="absolute left-0 top-0 h-full w-1 bg-[#1a2946] group-hover:bg-[#006f92] transition-colors duration-200"></div>
            </button>
          ))}
        </div>
      </div>

      {/* Generic Configuration Section */}
      {genericMCPServerConfig && (
          <h3 class="text-xl font-semibold text-[#1a2946] mb-3">
            Already know how to install?
          </h3>
          <p class="text-gray-600 mb-4">
            Use the following configuration to install the MCP Server on your client manually.
          </p>
          <pre class="bg-[#1a2946] text-[#fdf6e3] p-4 rounded-lg font-mono text-sm overflow-auto">
{JSON.stringify(genericMCPServerConfig, null, 2)}
          </pre>
      )}
    </div>
  </div>
</main>

<script>
  // Handle client button clicks
  document.querySelectorAll('.client-button').forEach(button => {
    button.addEventListener('click', () => {
      const clientId = button.getAttribute('data-client-id');
      const currentPath = window.location.pathname;
      
      if (clientId) {
        // Navigate to the client-specific page
        window.location.href = `${currentPath}/${clientId}`;
      }
    });
  });
</script>
