
---
export const prerender = false;

import Layout from "../layouts/Layout.astro";
import McpServerDetails from "../components/McpServerDetails.astro";
import PageHeader from "../components/PageHeader.astro";
import { generateGenericConfig } from "../utils/configs";
import { getClientsForButtons } from "../utils/clientData";
import type { LinkData } from "../utils/types";

const { encodeddata } = Astro.params;

let decodedData: LinkData;
try {
  // Try simple base64 decode first
  decodedData = JSON.parse(atob(encodeddata || ''));
} catch (error) {
  // If that fails, try with URL decoding
  try {
    let decodedString = decodeURIComponent(encodeddata || '');
    if (decodedString.includes('%')) {
      decodedString = decodeURIComponent(decodedString);
    }
    decodedData = JSON.parse(atob(decodedString));
  } catch (fallbackError) {
    console.error('Failed to decode data:', error, fallbackError);
    return Astro.redirect('/');
  }
}

const mcpServerName = decodedData?.name ? `"${decodedData.name}" MCP Server` : "MCP Server";
const genericMCPServerConfig = generateGenericConfig(decodedData);

// Get client button data from the shared module
const buttons = getClientsForButtons();
---

<Layout />
<main class="min-h-screen flex flex-col lg:flex-row bg-[#fdf6e3]">
  <!-- Left side: Clean minimal MCP server info -->
  <div class="w-full lg:w-2/5 bg-[#fdf6e3] border-b lg:border-b-0 lg:border-r border-[#e0ddd4] flex flex-col px-6 lg:px-12 py-8 lg:py-16">
    <PageHeader />

    <div class="max-w-md flex-1 flex flex-col lg:mt-[20%] xl:mt-[15%] 2xl:mt-32">
      <McpServerDetails decodedData={decodedData} />
    </div>
  </div>

  <!-- Right side: Generic config and client selection -->
  <div class="flex-1 bg-white shadow-xl">
    <div class="px-6 lg:px-12 py-8 lg:py-16 max-w-3xl">
      
{/* Generic Configuration Section */}
      {genericMCPServerConfig && (
        <div class="bg-[#f8f9fa] border border-[#e9ecef] rounded-lg p-6 mb-16">
          <h3 class="text-lg lg:text-xl font-semibold text-[#1a2946] mb-3">
            Already know how to install?
          </h3>
          <p class="text-gray-600 mb-4">
            Use the following configuration to install the MCP Server on your client manually.
          </p>
          <pre class="bg-[#1a2946] text-[#fdf6e3] p-4 rounded-lg font-mono text-xs sm:text-sm overflow-auto">{JSON.stringify(genericMCPServerConfig, null, 2)}</pre>
        </div>
      )}

      
      <!-- Header -->
      <div class="mb-8">
        <h2 class="text-2xl lg:text-3xl font-bold text-[#1a2946] mb-4">
          Choose Your MCP Client
        </h2>
        <p class="text-gray-600">
          Select your preferred client for specific installation instructions or use the general configuration below if you know how to add it manually.
        </p>
      </div>

      <!-- Client Selection Grid -->
      <div class="mb-12">
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {buttons
            .sort((a, b) => {
              const aCompatible = a.isCompatible ? a.isCompatible(decodedData) : true;
              const bCompatible = b.isCompatible ? b.isCompatible(decodedData) : true;
              // Compatible items first (true sorts before false)
              return Number(bCompatible) - Number(aCompatible);
            })
            .map((button) => {
            const isCompatible = button.isCompatible ? button.isCompatible(decodedData) : true;
            const baseClasses = "relative py-4 px-6 rounded-lg transition-all duration-200 flex items-center shadow-sm overflow-hidden w-full no-underline";
            const enabledClasses = "bg-[#fffefc] border border-[#e0ddd4] hover:border-[#006f92] text-[#1a2946] hover:text-[#006f92] hover:shadow group";
            const disabledClasses = "bg-gray-100 border border-gray-300 text-gray-400 cursor-not-allowed";
            
            return isCompatible ? (
              <a
                href={`${Astro.url.pathname}/${button.id}`}
                class={`${baseClasses} ${enabledClasses}`}
              >
                {/* Image or placeholder */}
                <div class="w-8 h-8 flex items-center justify-center mr-4 flex-shrink-0">
                  {button.imageUrl ? (
                    <img src={button.imageUrl} alt={`${button.label} icon`} class="w-6 h-6 object-contain" />
                  ) : (
                    <div class="w-4 h-4 bg-[#1a2946] group-hover:bg-[#006f92] transition-colors duration-200 rounded-sm"></div>
                  )}
                </div>
                <span class="font-semibold text-left">{button.label}</span>
                {/* Decorative accent element */}
                <div class="absolute left-0 top-0 h-full w-1 bg-[#1a2946] group-hover:bg-[#006f92] transition-colors duration-200"></div>
              </a>
            ) : (
              <div
                class={`${baseClasses} ${disabledClasses}`}
                title={`${button.label} is not compatible with this server type`}
              >
                {/* Image or placeholder */}
                <div class="w-8 h-8 flex items-center justify-center mr-4 flex-shrink-0">
                  {button.imageUrl ? (
                    <img src={button.imageUrl} alt={`${button.label} icon`} class="w-6 h-6 object-contain opacity-50" />
                  ) : (
                    <div class="w-4 h-4 bg-gray-400 rounded-sm"></div>
                  )}
                </div>
                <span class="font-semibold text-left">{button.label}</span>
                <span class="ml-auto text-xs text-gray-400">(Not compatible)</span>
                {/* Decorative accent element */}
                <div class="absolute left-0 top-0 h-full w-1 bg-gray-400"></div>
              </div>
            );
          })}
        </div>
      </div>

      
    </div>
  </div>
</main>

<script src="/scripts/mcp-copy-buttons.js" is:inline></script>
